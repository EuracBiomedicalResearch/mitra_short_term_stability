pch = pch, col = "#00000080")
legend("topleft", col = col_storage, legend = names(col_storage), pch = 16,
cex = 0.4)
plot_pca(pc_raw_bag, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "raw data, bag",
pch = pch, col = "#00000080")
plot_pca(pc_norm_bag, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "normalized data, bag",
pch = pch, col = "#00000080")
plot_pca(pc_norm_bag, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "normalized data, bag",
pch = pch, col = "#00000080")
## Perform data imputation for PCA
assays(res_neg)$normalized_filled_imputed <-
imputeRowMinRand(assay(res_neg, "normalized_filled"),
method = "from_to")
assays(res_neg)$raw_filled_imputed <-
imputeRowMinRand(assay(res_neg, "raw_filled"),
method = "from_to")
pc_raw <- prcomp(t(log2(assay(res_neg, "raw_filled_imputed"))),
scale = FALSE, center = TRUE)
pc_norm <- prcomp(t(log2(assay(res_neg, "normalized_filled_imputed"))),
scale = FALSE, center = TRUE)
pch <- rep(21, ncol(res_neg))
par(mfrow = c(2, 2), mar = c(4, 4, 1, 0.5))
plot_pca(pc_raw, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 1, pc_y = 2, main = "raw data", pch = pch, col = "#00000080")
legend("topleft", col = col_time, legend = names(col_time), pch = 16,
cex = 0.4)
plot_pca(pc_raw, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 3, pc_y = 4, main = "raw data", pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 1, pc_y = 2, main = "normalized data",
pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 3, pc_y = 4, main = "normalized data",
pch = pch, col = "#00000080")
pc_raw <- prcomp(
t(log2(assay(res_neg, "raw_filled_imputed")[is_info$feature_id, ])),
scale = FALSE, center = TRUE)
pc_norm <- prcomp(
t(log2(assay(res_neg, "normalized_filled_imputed")[is_info$feature_id, ])),
scale = FALSE, center = TRUE)
pch <- rep(21, ncol(res_neg))
par(mfrow = c(2, 2), mar = c(4, 4, 1, 0.5))
plot_pca(pc_raw, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "raw data IS", pch = pch, col = "#00000080")
legend("bottomleft", col = col_storage, legend = names(col_storage), pch = 16,
cex = 0.4)
plot_pca(pc_raw, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "raw data IS", pch = pch, col = "#00000080")
dobox <- function(
x, col = paste0(col_storage[as.character(data_neg$storage)], "ff"),
outline = FALSE, notch = TRUE, range = 0,
border = paste0(col_storage[as.character(data_neg$storage)], "60"),
ylab = expression(log[2]~abundance), xaxt = "n", xlab = "",
...) {
boxplot(x, col = col, outline = outline, notch = notch, range = range,
border = border, ylab = ylab, xaxt = xaxt, xlab = xlab, ...)
grid(nx = NA, ny = NULL)
}
layout(mat = matrix(1:2, ncol = 1), height = c(0.3, 0.7))
cols <- col_storage[as.character(res_neg$storage)]
par(mar = c(0.2, 4.5, 2, 0.5))
barplot(apply(assay(res_neg, "raw"), MARGIN = 2, function(x) sum(!is.na(x))),
col = paste0(cols, 80), ylim = c(0, 15000),
ylab = "Features", xaxt = "n", main = "Detected raw data")
legend("top", horiz = TRUE, col = col_storage, legend = names(col_storage),
lwd = 1)
par(mar = c(0.2, 4.5, 0, 0.5))
dobox(log2(assay(res_neg, "raw")), col = paste0(cols, "ff"), xaxt = "n",
border = paste0(cols, 60))
points(colMeans(log2(assay(res_neg, "raw")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
dobox <- function(
x, col = paste0(col_storage[as.character(data_neg$storage)], "ff"),
outline = FALSE, notch = TRUE, range = 0,
border = paste0(col_storage[as.character(data_neg$storage)], "60"),
ylab = expression(log[2]~abundance), xaxt = "n", xlab = "",
...) {
boxplot(x, col = col, outline = outline, notch = notch, range = range,
border = border, ylab = ylab, xaxt = xaxt, xlab = xlab, ...)
grid(nx = NA, ny = NULL)
}
layout(mat = matrix(1:2, ncol = 1), height = c(0.3, 0.7))
cols <- col_storage[as.character(res_neg$storage)]
par(mar = c(0.2, 4.5, 2, 0.5))
barplot(apply(assay(res_neg, "raw"), MARGIN = 2, function(x) sum(!is.na(x))),
col = paste0(cols, 80), ylim = c(0, 20000),
ylab = "Features", xaxt = "n", main = "Detected raw data")
legend("top", horiz = TRUE, col = col_storage, legend = names(col_storage),
lwd = 1)
par(mar = c(0.2, 4.5, 0, 0.5))
dobox(log2(assay(res_neg, "raw")), col = paste0(cols, "ff"), xaxt = "n",
border = paste0(cols, 60))
points(colMeans(log2(assay(res_neg, "raw")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
layout(mat = matrix(1:2, ncol = 1), height = c(0.3, 0.7))
cols <- col_storage[as.character(res_neg$storage)]
par(mar = c(0.2, 4.5, 2, 0.5))
barplot(apply(assay(res_neg, "raw_only_filled"), MARGIN = 2,
function(x) sum(!is.na(x))),
col = paste0(cols, 80), ylim = c(0, 15000),
ylab = "Features", xaxt = "n", main = "Filled-in raw data")
legend("top", horiz = TRUE, col = col_storage, legend = names(col_storage),
lwd = 1)
par(mar = c(0.2, 4.5, 0, 0.5))
dobox(log2(assay(res_neg, "raw_only_filled")), col = paste0(cols, "ff"),
xaxt = "n", border = paste0(cols, 60))
points(colMeans(log2(assay(res_neg, "raw_only_filled")), na.rm = TRUE),
type = "l")
grid(nx = NA, ny = NULL)
layout(mat = matrix(1:2, ncol = 1), height = c(0.3, 0.7))
cols <- col_storage[as.character(res_neg$storage)]
par(mar = c(0.2, 4.5, 2, 0.5))
barplot(apply(assay(res_neg, "raw_filled"), MARGIN = 2,
function(x) sum(!is.na(x))),
col = paste0(cols, 80), ylim = c(0, 20000),
ylab = "Features", xaxt = "n", main = "Detected and filled-in raw data")
legend("top", horiz = TRUE, col = col_storage, legend = names(col_storage),
lwd = 1)
par(mar = c(0.2, 4.5, 0, 0.5))
dobox(log2(assay(res_neg, "raw_filled")), col = paste0(cols, "ff"), xaxt = "n",
border = paste0(cols, 60))
points(colMeans(log2(assay(res_neg, "raw_filled")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
layout(mat = matrix(1:2, ncol = 1), height = c(0.3, 0.7))
cols <- col_storage[as.character(res_neg$storage)]
par(mar = c(0.2, 4.5, 2, 0.5))
barplot(apply(assay(res_neg, "raw_filled"), MARGIN = 2,
function(x) sum(!is.na(x))),
col = paste0(cols, 80), ylim = c(0, 30000),
ylab = "Features", xaxt = "n", main = "Detected and filled-in raw data")
legend("top", horiz = TRUE, col = col_storage, legend = names(col_storage),
lwd = 1)
par(mar = c(0.2, 4.5, 0, 0.5))
dobox(log2(assay(res_neg, "raw_filled")), col = paste0(cols, "ff"), xaxt = "n",
border = paste0(cols, 60))
points(colMeans(log2(assay(res_neg, "raw_filled")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
library(Rdisop)
library("MetaboCoreUtils")
is_info <- read.table(
"https://raw.githubusercontent.com/EuracBiomedicalResearch/lcms-standards/master/data/internal_standards.txt",
sep = "\t", header = TRUE, as.is = TRUE)
is_info <- is_info[!is.na(is_info$POS), ]
is_info$class <- "IS"
is_info$mzneut = NA
is_info$mz_ion = NA
for (i in seq(nrow(is_info))) {
if (grepl("C", is_info$formula[i]))
is_info$mzneut[i] <- getMolecule(is_info$formula[i])$exactmass
else
is_info$mzneut[i] = as.numeric(is_info$formula[i])
#' Calculate also the m/z
is_info$mz_ion[i] <- mass2mz(is_info$mzneut[i],
adduct = is_info$NEG[i])[1, 1]
}
library(Rdisop)
library("MetaboCoreUtils")
is_info <- read.table(
"https://raw.githubusercontent.com/EuracBiomedicalResearch/lcms-standards/master/data/internal_standards.txt",
sep = "\t", header = TRUE, as.is = TRUE)
is_info <- is_info[!is.na(is_info$NEG), ]
is_info$class <- "IS"
is_info$mzneut = NA
is_info$mz_ion = NA
for (i in seq(nrow(is_info))) {
if (grepl("C", is_info$formula[i]))
is_info$mzneut[i] <- getMolecule(is_info$formula[i])$exactmass
else
is_info$mzneut[i] = as.numeric(is_info$formula[i])
#' Calculate also the m/z
is_info$mz_ion[i] <- mass2mz(is_info$mzneut[i],
adduct = is_info$NEG[i])[1, 1]
}
is_info <- is_info[!is.na(is_info$mz_ion), ]
#' For each internal standard, try to find features that overlap the m/z
#' and are close to the expected retention time.
rt_tol <- 30
is_info$feature_id <- NA_character_
for (i in seq_len(nrow(is_info))) {
fts <- featureDefinitions(data_neg, mz = is_info$mz_ion[i], ppm = 10)
if (nrow(fts)) {
rtdiff <- abs(fts$rtmed - is_info$RT[i])
keep <- rtdiff < rt_tol
if (sum(keep) == 1)
is_info$feature_id[i] <- rownames(fts)[keep]
}
}
is_info <- is_info[!is.na(is_info$feature_id), ]
is_info_features <- featureChromatograms(
data_neg, features = is_info$feature_id, expandRt = 5)
#' Plot the features for the internal standards.
col <- col_storage[as.character(res_neg$storage)]
dr <- paste0(IMAGE_PATH, "internal-standards/")
dir.create(dr, showWarnings = FALSE)
for (i in seq_len(nrow(is_info))) {
fn <- gsub("%", "", paste0(dr, "IS_", is_info[i, "name"], "_POS.png"))
chr <- is_info_features[i, ]
cls <- col[chromPeaks(chr)[, "sample"]]
png(fn, width = 16, height = 8, units = "cm", res = 200, pointsize = 4)
plot(chr, peakBg = paste0(cls, 20),
main = paste0(is_info$name[i], ": ",
format(mz(chr)[1], digits = 6), "-",
format(mz(chr)[2], digits = 6)),
peakCol = paste0(cls, 60))
abline(v = is_info$RT[i], lty = 2)
dev.off()
}
#' table of internal standards with mean and sd of abundances (in log2 scale)
tmp_fv <- assay(res_neg, "raw")[is_info$feature_id, ]
is_info$mean_abd <- rowMeans(log2(tmp_fv), na.rm = TRUE)
is_info$sd_abd <- rowSds(log2(tmp_fv), na.rm = TRUE)
is_info$RSD <- rowRsd(tmp_fv, na.rm = TRUE)
pandoc.table(is_info[, c("name", "mean_abd", "sd_abd", "RSD")],
style = "rmarkdown", caption = "List of internal standards.")
## Calculate median and scaling factors
mdns <- apply(assay(res_neg, "raw_filled"), MARGIN = 2, median, na.rm = TRUE)
nf_mdn <- mdns / median(mdns)
median_top_x <- function(x, top = 500) {
idx <- order(x, decreasing = TRUE)
median(x[idx][seq_len(top)], na.rm = TRUE)
}
mdns <- apply(assay(res_neg, "raw_filled"), MARGIN = 2,
median_top_x, top = 1000)
nf_mdn <- mdns / median(mdns)
## Perform normalization
assays(res_neg)$median_filled <- sweep(assay(res_neg, "raw_filled"),
MARGIN = 2, nf_mdn, `/`)
## Raw data_neg
par(mfrow = c(2, 1), mar = c(0.2, 4.5, 4.5, 0.5))
cols <- col_storage[as.character(res_neg$storage)]
## Before between-sample normalization
dobox(log2(assay(res_neg, "raw_filled")), col = paste0(cols, "ff"),
xaxt = "n", border = paste0(cols, 60),
main = "Before between-sample normalization")
points(colMeans(log2(assay(res_neg, "raw_filled")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
## After normalization by median
dobox(log2(assay(res_neg, "median_filled")), col = paste0(cols, "ff"),
xaxt = "n", border = paste0(cols, 60),
main = "After normalization by median")
points(colMeans(log2(assay(res_neg, "median_filled")), na.rm = TRUE),
type = "l")
grid(nx = NA, ny = NULL)
## RLA for median normalization
par(mfrow = c(2, 1), mar = c(0.2, 4.5, 4.5, 0.5))
boxplot(xcms::rowRla(assay(res_neg, "raw_filled"), group = res_neg$storage),
cex = 0.5, pch = 16, col = col_storage[as.character(res_neg$storage)],
border = paste0(col_storage[as.character(res_neg$storage)], 40),
notch = TRUE, outline = FALSE, ylim = c(-7, 5),
xaxt = "n", ylab = "RLA", main = "Before between-sample normalization")
grid(nx = NA, ny = NULL)
boxplot(xcms::rowRla(assay(res_neg, "median_filled"), group = res_neg$storage),
cex = 0.5, pch = 16, col = col_storage[as.character(res_neg$storage)],
border = paste0(col_storage[as.character(res_neg$storage)], 40),
notch = TRUE, outline = FALSE, ylim = c(-7, 5),
xaxt = "n", ylab = "RLA", main = "After normalization by median")
grid(nx = NA, ny = NULL)
tmp <- log2(assay(res_neg, "median_filled"))
tmp[is.na(assay(res_neg, "raw"))] <- NA
mdls <- xcms:::rowFitModel(
y ~ injection_idx,
data = as.data.frame(
colData(res_neg)[res_neg$storage == "QC", ]),
y = tmp[, res_neg$storage == "QC"],
method = "lmrob",
minVals = 5)
req_prop <- 3/4
## Calculating flags
flgs_inj_range <- vapply(mdls, flag_model_inj_range, logical(1),
min_range = diff(range(res_neg$injection_idx))
* req_prop, column = "injection_idx")
## Calculate slopes for
slps <- vapply(mdls, function(z) {
if (length(z) > 1) {
coefficients(z)[2]
} else NA_real_
}, numeric(1))
## Plot the distribution of slopes.
par(mar = c(4, 4.5, 1, 0.5))
hist(slps, breaks = 128, xlab = "slope", main = "Distribution of slopes")
hist(slps[which(flgs_inj_range)], breaks = 128, add = TRUE,
col = "#0000ff80")
## Split into excluded and good mdls
mdls_inj_range <- mdls[which(flgs_inj_range)]
## Remove model fits for the flagged friends.
mdls[unique(which(flgs_inj_range))] <- NA
slps[unique(which(flgs_inj_range))] <- NA
## Identify the features that are adjusted
fts_adj <- sort(unique(c(
names(mdls)[!is.na(mdls)],
names(mdls)[!is.na(mdls)],
names(mdls)[!is.na(mdls)]
)))
tab <- cbind(c(length(mdls),
length(which(flgs_inj_range)),
sum(!is.na(mdls))))
rownames(tab) <- c("total features", "low inj idx range",
"valid model fits")
cptn <- paste("Numbers of features for which an injection index dependent",
"model could be fitted.")
pandoc.table(tab, style = "rmarkdown", caption = cptn)
## Adjust the whole (filled-in) dataset
fv_adj <- assay(res_neg, "median_filled")
fv_adj <- xcms:::applyModelAdjustment(
y = log2(fv_adj),
lmod = mdls,
data = as.data.frame(colData(res_neg),
shiftNegative = "replaceHalfMin"))
assays(res_neg)$normalized_filled <- 2^fv_adj
## Perform data imputation for PCA
assays(res_neg)$normalized_filled_imputed <-
imputeRowMinRand(assay(res_neg, "normalized_filled"),
method = "from_to")
assays(res_neg)$raw_filled_imputed <-
imputeRowMinRand(assay(res_neg, "raw_filled"),
method = "from_to")
pc_raw <- prcomp(t(log2(assay(res_neg, "raw_filled_imputed"))),
scale = FALSE, center = TRUE)
pc_norm <- prcomp(t(log2(assay(res_neg, "normalized_filled_imputed"))),
scale = FALSE, center = TRUE)
pch <- rep(21, ncol(res_neg))
par(mfrow = c(2, 2), mar = c(4, 4, 1, 0.5))
plot_pca(pc_raw, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "raw data", pch = pch, col = "#00000080")
legend("topleft", col = col_storage, legend = names(col_storage), pch = 16,
cex = 0.4)
plot_pca(pc_raw, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "raw data", pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "normalized data",
pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "normalized data",
pch = pch, col = "#00000080")
## Perform data imputation for PCA
assays(res_neg)$normalized_filled_imputed <-
imputeRowMinRand(assay(res_neg, "normalized_filled"),
method = "from_to")
assays(res_neg)$raw_filled_imputed <-
imputeRowMinRand(assay(res_neg, "raw_filled"),
method = "from_to")
pc_raw <- prcomp(t(log2(assay(res_neg, "raw_filled_imputed"))),
scale = FALSE, center = TRUE)
pc_norm <- prcomp(t(log2(assay(res_neg, "normalized_filled_imputed"))),
scale = FALSE, center = TRUE)
pch <- rep(21, ncol(res_neg))
par(mfrow = c(2, 2), mar = c(4, 4, 1, 0.5))
plot_pca(pc_raw, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 1, pc_y = 2, main = "raw data", pch = pch, col = "#00000080")
legend("topleft", col = col_time, legend = names(col_time), pch = 16,
cex = 0.4)
plot_pca(pc_raw, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 3, pc_y = 4, main = "raw data", pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 1, pc_y = 2, main = "normalized data",
pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_time[as.character(res_neg$time)], 80),
pc_x = 3, pc_y = 4, main = "normalized data",
pch = pch, col = "#00000080")
tmp_ppool <- res_neg[, res_neg$storage == "QC"]
pc_raw_pool <- prcomp(t(log2(assay(tmp_ppool, "raw_filled_imputed"))),
scale = FALSE, center = TRUE)
pc_norm_pool <- prcomp(t(log2(assay(tmp_ppool, "normalized_filled_imputed"))),
scale = FALSE, center = TRUE)
pch <- rep(21, ncol(res_neg))
par(mfrow = c(2, 2), mar = c(4, 4, 1, 0.5))
plot_pca(pc_raw_pool, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "raw data, pool",
pch = pch, col = "#00000080")
legend("topleft", col = col_storage, legend = names(col_storage), pch = 16,
cex = 0.4)
plot_pca(pc_raw_pool, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "raw data, pool",
pch = pch, col = "#00000080")
plot_pca(pc_norm_pool, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "normalized data, pool",
pch = pch, col = "#00000080")
plot_pca(pc_norm_pool, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "normalized data, pool",
pch = pch, col = "#00000080")
pc_raw <- prcomp(
t(log2(assay(res_neg, "raw_filled_imputed")[is_info$feature_id, ])),
scale = FALSE, center = TRUE)
pc_norm <- prcomp(
t(log2(assay(res_neg, "normalized_filled_imputed")[is_info$feature_id, ])),
scale = FALSE, center = TRUE)
pch <- rep(21, ncol(res_neg))
par(mfrow = c(2, 2), mar = c(4, 4, 1, 0.5))
plot_pca(pc_raw, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "raw data IS", pch = pch, col = "#00000080")
legend("bottomleft", col = col_storage, legend = names(col_storage), pch = 16,
cex = 0.4)
plot_pca(pc_raw, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "raw data IS", pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 1, pc_y = 2, main = "normalized data IS",
pch = pch, col = "#00000080")
plot_pca(pc_norm, bg = paste0(col_storage[as.character(res_neg$storage)], 80),
pc_x = 3, pc_y = 4, main = "normalized data IS",
pch = pch, col = "#00000080")
##Raw data
par(mfrow = c(3, 1), mar = c(0.2, 4.5, 4.5, 0.5))
cols <- col_storage[as.character(res_neg$storage)]
dobox(log2(assay(res_neg, "raw_filled")), col = paste0(cols, "ff"),
xaxt = "n", border = paste0(cols, 60), main = "Raw data")
points(colMeans(log2(assay(res_neg, "raw_filled")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
## Median normalized
dobox(log2(assay(res_neg, "median_filled")), col = paste0(cols, "ff"),
xaxt = "n", border = paste0(cols, 60), main = "Median-scaled data")
points(colMeans(log2(assay(
res_neg, "median_filled")), na.rm = TRUE), type = "l")
grid(nx = NA, ny = NULL)
## Final normalized data
dobox(log2(assay(res_neg, "normalized_filled")), col = paste0(cols, "ff"),
xaxt = "n", border = paste0(cols, 60),
main = "Within-batch normalized data")
points(colMeans(log2(assay(res_neg, "normalized_filled")), na.rm = TRUE),
type = "l")
grid(nx = NA, ny = NULL)
## Calculate RSD on all POOL signals
rsd_raw <- rowRsd(
assay(res_neg, "raw_filled")[, res_neg$storage == "QC"])
rsd_scl <- rowRsd(
assay(res_neg, "median_filled")[, res_neg$storage == "QC"])
rsd_bbn <- rowRsd(
assay(res_neg, "normalized_filled")[, res_neg$storage == "QC"])
## Calculate RSD on all study samples
rsd_raw_sts <- rowRsd(
assay(res_neg, "raw_filled")[, res_neg$storage != "QC"])
rsd_scl_sts <- rowRsd(
assay(res_neg, "median_filled")[, res_neg$storage != "QC"])
rsd_bbn_sts <- rowRsd(
assay(res_neg, "normalized_filled")[, res_neg$storage != "QC"])
## Calculate RSD on internal standards in POOL signals
tmp_is <- assay(res_neg, "raw_filled")[is_info$feature_id, ]
rsd_raw_is <- rowRsd(tmp_is[, res_neg$storage == "QC"])
tmp_is <- assay(res_neg, "median_filled")[is_info$feature_id, ]
rsd_scl_is <- rowRsd(tmp_is[, res_neg$storage == "QC"])
tmp_is <- assay(res_neg, "normalized_filled")[is_info$feature_id, ]
rsd_bbn_is <- rowRsd(tmp_is[, res_neg$storage == "QC"])
## Calculate RSD on good internal standards in study samples
tmp_is <- assay(res_neg, "raw_filled")[is_info$feature_id, ]
rsd_raw_is_sts <- rowRsd(tmp_is[, res_neg$storage != "QC"])
tmp_is <- assay(res_neg, "median_filled")[is_info$feature_id, ]
rsd_scl_is_sts <- rowRsd(tmp_is[, res_neg$storage != "QC"])
tmp_is <- assay(res_neg, "normalized_filled")[is_info$feature_id, ]
rsd_bbn_is_sts <- rowRsd(tmp_is[, res_neg$storage != "QC"])
par(mfrow = c(2, 2))
boxplot(list(raw = rsd_raw, scaled = rsd_scl,
normalized = rsd_bbn),
main = "All features - POOL samples")
grid(nx = NA, ny = NULL)
abline(h = 0.3)
boxplot(list(raw = rsd_raw_sts, scaled = rsd_scl_sts,
normalized = rsd_bbn_sts),
main = "All features - Study samples")
grid(nx = NA, ny = NULL)
abline(h = 0.3)
boxplot(list(raw = rsd_raw_is, scaled = rsd_scl_is,
normalized = rsd_bbn_is),
main = "IS features - POOL samples")
grid(nx = NA, ny = NULL)
abline(h = 0.3)
boxplot(list(raw = rsd_raw_is_sts, scaled = rsd_scl_is_sts,
normalized = rsd_bbn_is_sts),
main = "IS features - Study samples")
grid(nx = NA, ny = NULL)
abline(h = 0.3)
T <- rbind(
`QC samples, RSD` = c(raw = mean(rsd_raw, na.rm = TRUE),
scaled = mean(rsd_scl, na.rm = TRUE),
`within-batch` = mean(rsd_bbn, na.rm = TRUE)),
`study samples, RSD` = c(raw = mean(rsd_raw_sts, na.rm = TRUE),
scaled = mean(rsd_scl_sts, na.rm = TRUE),
`within-batch` = mean(rsd_bbn_sts, na.rm = TRUE)),
`IS QC, RSD` = c(raw = mean(rsd_raw_is, na.rm = TRUE),
scaled = mean(rsd_scl_is, na.rm = TRUE),
`within-batch` = mean(rsd_bbn_is, na.rm = TRUE)),
`IS study, RSD` = c(raw = mean(rsd_raw_is_sts, na.rm = TRUE),
scaled = mean(rsd_scl_is_sts, na.rm = TRUE),
`within-batch` = mean(rsd_bbn_is_sts, na.rm = TRUE)),
`QC samples, %RSD > 0.3` = c(sum(rsd_raw > 0.3, na.rm = TRUE),
sum(rsd_scl > 0.3, na.rm = TRUE),
sum(rsd_bbn > 0.3, na.rm = TRUE)) *
100 / length(rsd_raw),
`study samples, %RSD > 0.3` = c(sum(rsd_raw_sts > 0.3, na.rm = TRUE),
sum(rsd_scl_sts > 0.3, na.rm = TRUE),
sum(rsd_bbn_sts > 0.3, na.rm = TRUE)) *
100 / length(rsd_raw_sts),
`IS QC, %RSD > 0.3` = c(sum(rsd_raw_is > 0.3, na.rm = TRUE),
sum(rsd_scl_is > 0.3, na.rm = TRUE),
sum(rsd_bbn_is > 0.3, na.rm = TRUE)) *
100 / length(rsd_raw_is),
`IS study, %RSD > 0.3` = c(sum(rsd_raw_is_sts > 0.3, na.rm = TRUE),
sum(rsd_scl_is_sts > 0.3, na.rm = TRUE),
sum(rsd_bbn_is_sts > 0.3, na.rm = TRUE)) *
100 / length(rsd_raw_is_sts)
)
cpt <- paste0("Summary of RSD calculations. We show how the RSD changes among ",
"different groups: all features in POOL samples, only detected ",
"signals in POOL samples, all features in study samples, ",
"internal standards in POOL samples and internal standards in ",
"study samples.")
pandoc.table(T, caption = cpt, style = "rmarkdown")
assays(res_neg)$normalized_filled_imputed <-
imputeRowMinRand(assay(res_neg, "normalized_filled"),
method = "from_to")
save(res_neg, file = paste0(RDATA_PATH, "res_neg.RData"))
